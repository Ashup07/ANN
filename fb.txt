class NeuralNetwork:
    def __init__(self,input_size,hidden_size,outer_size):
        self.w1=np.random.randn(input_size,hidden_size)
        self.b1=np.zeros(hidden_size)
        self.w2=np.random.randn(hidden_size,outer_size)
        self.b2=np.zeros(outer_size)
    def sigmoid(self,x):
        return (1/1+np.exp(-x))

    def sig_der(self,x):
        return x*(1-x)

    def forward(self,x):
        self.z1=X@self.w1+self.b1
        self.a1=self.sigmoid(self.z1)
        self.z2=self.a1@self.w2*self.b2
        self.a2=self.sigmoid(self.z2)
        return self.a2

    def backward(self,X,y,output):
        self.output_error=y-output
        self.output_delta=self.output_error*self.sig_der(output)
        self.hidden_error=self.output_delta@self.w2.T
        self.hidden_delta=self.output_error*self.sig_der(self.a1)
        self.w1+=X.T@self.hidden_delta
        self.b1+=np.sum(self.hidden_delta,axis=0)
        self.w2+=self.a1.T@self.output_delta
        self.b2+=np.sum(self.output_delta,axis=0)

    def Predict(self,X):
        return self.forward(X)
        
    def train(self,X,y,epochs):
        for i in range(epochs):
            output=self.forward(X)
            self.backward(X,y,output)


X=np.array([[0,0],[0,1],[1,0],[1,1]])
Y=np.array([[0],[1],[1],[0]])
nn=NeuralNetwork(2,4,1)
nn.train(X,Y,epochs=10000)
prediction=nn.Predict(X)
print(prediction)