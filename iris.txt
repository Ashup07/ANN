iris=load_iris()
X=iris.data[:,[0,2]]
Y=iris.target
w=np.zeros(2)
b=0
lr=0.1
epochs=50
y=np.where(Y==0,0,1)

def perceptron(x,w,b):
    z=np.dot(x,w)+b
    return np.where(z>=0,1,-1)
for epochs in range(epochs):
    for i in range(len(X)):
        x=X[i]
        target=Y[i]
        output=perceptron(x,w,b)
        error=target-output
        w+=lr*error*x
        b+=lr*error

x_min,x_max=X[:,0].min()-0.5,X[:,0].max()+0.5
y_min,y_max=X[:,1].min()-0.5,X[:,1].max()+0.5
xx,yy=np.meshgrid(np.arange(x_min,x_max,0.02),np.arange(y_min,y_max,0.02))
z=perceptron(np.c_[xx.ravel(),yy.ravel()],w,b)
z=z.reshape(xx.shape)
plt.contour(xx,yy,z,cmap=plt.cm.Paired)

plt.scatter(X[:,0],X[:,1],c=y,cmap=plt.cm.Paired)
plt.xlabel('Sepal length')
plt.ylabel('Petal length')
plt.title("Perceptron decision regions")
plt.show()
